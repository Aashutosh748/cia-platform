{"version":3,"sources":["assets/community.png","assets/resources.png","assets/philosophy.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","history","useHistory","useEffect","nav","document","querySelector","h1","settext","text","textContent","style","opacity","setTimeout","window","onscroll","scrollY","classList","add","remove","onClick","push","pathname","Header","About","Philosophy","Footer","className","src","communitylogo","alt","Message","title","message","map","m","i","key","aboutimg1","philosophyimg","href","id","target","App","exact","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.a30989a5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/community.d2f17d49.png\";","module.exports = __webpack_public_path__ + \"static/media/resources.9353edc1.png\";","module.exports = __webpack_public_path__ + \"static/media/philosophy.fa535f62.png\";","import React, { useEffect } from 'react';\nimport {\n  BrowserRouter as Router,\n  useHistory,\n  Route,\n  Switch\n} from 'react-router-dom'\n\nimport './css/App.css'\n/* import darklogo from './assets/dark-logo.png';\nimport lighlogo from './assets/light-logo.png' */\n\nimport communitylogo from './assets/community.png';\nimport aboutimg1 from './assets/resources.png'\nimport philosophyimg from './assets/philosophy.png'\n\nfunction App() {\n\n\n\n  return (\n    <div className=\"app\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n\n        </Switch>\n      </Router>\n    </div>\n\n  );\n}\n\nfunction Home() {\n\n  const history = useHistory();\n  useEffect(() => {\n    const nav = document.querySelector('.app>nav');\n    const h1 = document.querySelector('.app>nav>h1');\n    function settext(text) {\n      if (h1.textContent !== text) {\n        h1.style.opacity = 0;\n        setTimeout(() => { h1.textContent = text; h1.style.opacity = 1; }, 200);\n      }\n    }\n    window.onscroll = () => {\n\n      if (window.scrollY > 10) {\n        nav.classList.add('nav-shadow');\n        settext('CIA')\n\n      } else {\n        nav.classList.remove('nav-shadow');\n        settext('Communities in Atria');\n      }\n    }\n\n    return () => window.onscroll = null;\n\n  });\n  return (\n    <>\n      <nav>\n        <h1>Communities in Atria</h1>\n        <ul>\n          <li onClick={() => history.push({ pathname: '/' })}>Home</li>\n          <li onClick={() => history.push({ pathname: '/events' })}>Events</li>\n          <li onClick={() => history.push({ pathname: '/blogs' })}>Blogs</li>\n          <li onClick={() => history.push({ pathname: '/team' })}>Team</li>\n        </ul>\n      </nav>\n      <Header />\n      <About />\n      <Philosophy />\n      <Footer />\n    </>\n  )\n}\n\nfunction Header() {\n\n  return (\n    <header>\n      <div className=\"landing-content\">\n        <div className=\"landing-message\">\n          <h1>The Future of Engineering starts here</h1>\n          <p>An open platform for Students to collaborate on engineering problems. To Dream big, design destiny and to be a real Visioneer</p>\n        </div>\n        <img src={communitylogo} alt=\"community\" />\n      </div>\n    </header>\n  )\n}\nconst Message = ({ title, message }) => (\n  <div className=\"message\">\n    <h1>{title}</h1>\n    <p>{message}</p>\n  </div>\n)\n\nfunction About() {\n\n  const messages = [\n    {\n      title: 'Resources',\n      message: 'CIA is the platform that facilitates resources to help your visions become reality. From components to oppournities, CIA is the best way to find the best resource.'\n    },\n    {\n      title: 'For Everyone, Always!',\n      message: 'CIA is built for inclusivity. Real engineering is the confluence of art, culture, sports and Technology.'\n    },\n    {\n      title: 'Mentorship',\n      message: 'Great ideas need great mentors. From domain experts to product designers, CIA helps realise ideas.'\n    },\n    {\n      title: 'Collaboration',\n      message: \"CIA's sole mission is to realise Enginnering through collaboration. Great things are always done by a team, never alone.\"\n    },\n  ];\n\n\n  return (\n    <div className=\"about\">\n      <div className=\"messages\">{messages.map((m, i) => <Message key={i} {...m} />)}</div>\n      <img src={aboutimg1} alt=\"resources\" />\n    </div>\n  )\n}\n\nfunction Philosophy() {\n  const messages = [\n    {\n      title: 'By Students! For Students!',\n      message: 'Its designed and run by students for students.'\n    },\n    {\n      title: 'For Everyone',\n      message: 'We belive the future of engineering is the confluence of all domains, CIA is always for students of all domains.'\n    },\n    {\n      title: 'Failure is Celebrated',\n      message: 'You dont need to have the greatest idea, the biggest brains or fancy tech. If you have any idea/interest, CIA will help make that a reality.'\n    },\n    {\n      title: 'Bridge Industry - Education Gap',\n      message: 'It takes many years for the lastest tech to reach academin books, CIA is the platform to explore the lastest trends in Enginnering.'\n    },\n  ]\n  return (\n    <div className=\"philosophy\">\n      <h1>Philosophy</h1>\n      <div>\n        <div className=\"messages\">{messages.map((m, i) => <Message key={i} {...m} />)}</div>\n        <img src={philosophyimg} alt=\"\" />\n      </div>\n    </div>\n  );\n}\n\nfunction Footer() {\n\n  return (\n    <footer>\n      <h1>Contact</h1>\n      <p>Mail us at <a href=\"mailto:cia@atria.edu\">cia@atria.edu</a></p>\n      <p id=\"phone\">call us at <a href=\"tel:+62896706255135\">+91 94888 44242</a></p>\n      <p>DM us at <a href=\"https://www.instagram.com/cia_together/\" target=\"_blank\">@cia_together</a></p>\n      <p>Visit us at  <br />\n        <a href=\"https://www.google.com/maps/place/Atria+Institute+of+Technology/@13.0325489,77.5899031,17z/data=!3m1!4b1!4m5!3m4!1s0x3bae17bd97727093:0x5135aab8250c1df5!8m2!3d13.0325489!4d77.5920918?hl=en-US\" target=\"_blank\">\n          ASKB Campus,<br /> 1st Main Rd, Ags Colony,<br /> Anandnagar, Hebbal,<br /> Bengaluru, Karnataka 560024\n        </a>\n      </p>\n    </footer>\n  )\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}