{"version":3,"sources":["assets/community.png","assets/recources.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","communitylogo","alt","About","Message","title","message","map","m","i","key","aboutimg1","Philosophy","App","useEffect","nav","document","querySelector","h1","settext","text","textContent","style","opacity","setTimeout","window","onscroll","scrollY","classList","add","remove","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,+LCsD3C,SAASC,IAEP,OACE,gCAEE,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,mBACb,qEACA,6JAEF,yBAAKC,IAAKC,IAAeC,IAAI,gBAMrC,SAASC,IAEP,IAkBMC,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,QAAV,OACd,yBAAKP,UAAU,WACb,4BAAKM,GACL,2BAAIC,KAIR,OACE,yBAAKP,UAAU,SACb,yBAAKA,UAAU,YA3BF,CACf,CACEM,MAAO,YACPC,QAAS,uKAEX,CACED,MAAO,wBACPC,QAAS,4GAEX,CACED,MAAO,aACPC,QAAS,sGAEX,CACED,MAAO,gBACPC,QAAS,6HAY2BC,KAAI,SAACC,EAAGC,GAAJ,OAAU,kBAACL,EAAD,eAASM,IAAKD,GAAOD,QACvE,yBAAKR,IAAKW,IAAWT,IAAI,eAK/B,SAASU,IACP,OACE,yBAAKb,UAAU,eAOJc,MAxGf,WAyBE,OAxBAC,qBAAU,WACR,IAAMC,EAAMC,SAASC,cAAc,YAC7BC,EAAKF,SAASC,cAAc,eAClC,SAASE,EAAQC,GACXF,EAAGG,cAAgBD,IACrBF,EAAGI,MAAMC,QAAU,EACnBC,YAAW,WAAQN,EAAGG,YAAcD,EAAMF,EAAGI,MAAMC,QAAU,IAAM,MAevE,OAZAE,OAAOC,SAAW,WAEZD,OAAOE,QAAU,IACnBZ,EAAIa,UAAUC,IAAI,cAClBV,EAAQ,SAGRJ,EAAIa,UAAUE,OAAO,cACrBX,EAAQ,0BAIL,kBAAMM,OAAOC,SAAW,SAI/B,yBAAK3B,UAAU,OACb,6BACE,oDACA,4BACE,oCACA,sCACA,qCACA,sCAGJ,kBAACD,EAAD,MACA,kBAACK,EAAD,MACA,kBAACS,EAAD,QCpCcmB,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrB,SAASsB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMxC,c","file":"static/js/main.bfb8bf3f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/community.d2f17d49.png\";","module.exports = __webpack_public_path__ + \"static/media/recources.0533d271.png\";","import React, { useEffect } from 'react';\n\n\nimport './css/App.css'\n/* import darklogo from './assets/dark-logo.png';\nimport lighlogo from './assets/light-logo.png' */\n\nimport communitylogo from './assets/community.png';\nimport aboutimg1 from './assets/recources.png'\n\nfunction App() {\n  useEffect(() => {\n    const nav = document.querySelector('.app>nav');\n    const h1 = document.querySelector('.app>nav>h1');\n    function settext(text) {\n      if (h1.textContent !== text) {\n        h1.style.opacity = 0;\n        setTimeout(() => { h1.textContent = text; h1.style.opacity = 1; }, 200);\n      }\n    }\n    window.onscroll = () => {\n\n      if (window.scrollY > 10) {\n        nav.classList.add('nav-shadow');\n        settext('CIA')\n\n      } else {\n        nav.classList.remove('nav-shadow');\n        settext('Communities in Atria');\n      }\n    }\n\n    return () => window.onscroll = null;\n\n  });\n  return (\n    <div className=\"app\">\n      <nav>\n        <h1>Communities in Atria</h1>\n        <ul>\n          <li>Home</li>\n          <li>Events</li>\n          <li>Blogs</li>\n          <li>Team</li>\n        </ul>\n      </nav>\n      <Header />\n      <About />\n      <Philosophy />\n    </div>\n  );\n}\n\n\nfunction Header() {\n\n  return (\n    <header>\n\n      <div className=\"landing-content\">\n        <div className=\"landing-message\">\n          <h1>The Future of Engineering starts here</h1>\n          <p>An open platform for Students to collaborate on engineering problems. To Dream big, design destiny and to be a real Visioneer</p>\n        </div>\n        <img src={communitylogo} alt=\"community\" />\n      </div>\n    </header>\n  )\n}\n\nfunction About() {\n\n  const messages = [\n    {\n      title: 'Resources',\n      message: 'CIA is the platform that facilitates resources to help your visions become reality. From components to oppournities, CIA is the best way to find the best resource.'\n    },\n    {\n      title: 'For Everyone, Always!',\n      message: 'CIA is built for inclusivity. Real engineering is the confluence of art, culture, sports and Technology.'\n    },\n    {\n      title: 'Mentorship',\n      message: 'Great ideas need great mentors. From domain experts to product designers, CIA helps realise ideas.'\n    },\n    {\n      title: 'Collaboration',\n      message: \"CIA's sole mission is to realise Enginnering through collaboration. Great things are always done by a team, never alone.\"\n    },\n  ]\n  const Message = ({ title, message }) => (\n    <div className=\"message\">\n      <h1>{title}</h1>\n      <p>{message}</p>\n    </div>\n  )\n\n  return (\n    <div className=\"about\">\n      <div className=\"messages\">{messages.map((m, i) => <Message key={i} {...m} />)}</div>\n      <img src={aboutimg1} alt=\"resources\" />\n    </div>\n  )\n}\n\nfunction Philosophy() {\n  return (\n    <div className=\"philosophy\">\n\n    </div>\n  );\n}\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}